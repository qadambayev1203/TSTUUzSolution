// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240730053244_newMigration1")]
    partial class newMigration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Model.AppealToEmployeeModel.AppealToEmployee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("full_name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("subject")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.HasIndex("user_id");

                    b.ToTable("appeal_to_employee_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.AppealToEmployeeModel.AppealToEmployeeTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("full_name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("subject")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_id");

                    b.HasIndex("user_id");

                    b.ToTable("appeal_to_employee_translation_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.AppealsToTheRectorsModel.AppealToRector", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("addres")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("appeal")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("confirm")
                        .HasColumnType("boolean");

                    b.Property<int?>("country_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("district_id")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("employe_id")
                        .HasColumnType("integer");

                    b.Property<int?>("file_id")
                        .HasColumnType("integer");

                    b.Property<string>("fio_")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int?>("gender_id")
                        .HasColumnType("integer");

                    b.Property<int?>("neighborhood_id")
                        .HasColumnType("integer");

                    b.Property<string>("telephone_number_one")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("telephone_number_two")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("territorie_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("country_id");

                    b.HasIndex("district_id");

                    b.HasIndex("employe_id");

                    b.HasIndex("file_id");

                    b.HasIndex("gender_id");

                    b.HasIndex("neighborhood_id");

                    b.HasIndex("territorie_id");

                    b.ToTable("appeals_to_rectors_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.AppealsToTheRectorsModel.AppealToRectorTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("addres")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("appeal")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("confirm")
                        .HasColumnType("boolean");

                    b.Property<int?>("country_translation_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("district_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("employe_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("file_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("fio_")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int?>("gender_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("neighborhood_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("telephone_number_one")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("telephone_number_two")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("territorie_translation_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("country_translation_id");

                    b.HasIndex("district_translation_id");

                    b.HasIndex("employe_translation_id");

                    b.HasIndex("file_translation_id");

                    b.HasIndex("gender_translation_id");

                    b.HasIndex("language_id");

                    b.HasIndex("neighborhood_translation_id");

                    b.HasIndex("territorie_translation_id");

                    b.ToTable("appeals_to_rectors_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.BlogsCategoryModel.BlogCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("blogs_category_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.BlogsCategoryModel.BlogCategoryTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("blog_category_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("blog_category_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("blogs_category_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.BlogsModel.Blog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("blog_category_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("crated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("event_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("event_end_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("favorite")
                        .HasColumnType("boolean");

                    b.Property<int?>("img_id")
                        .HasColumnType("integer");

                    b.Property<int?>("position")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("title_short")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("blog_category_id");

                    b.HasIndex("img_id");

                    b.HasIndex("status_id");

                    b.HasIndex("user_id");

                    b.ToTable("blogs_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.BlogsModel.BlogTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("blog_category_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("blog_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("crated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("event_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("event_end_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("favorite")
                        .HasColumnType("boolean");

                    b.Property<int?>("img_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("position")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("title_short")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("blog_category_translation_id");

                    b.HasIndex("blog_id");

                    b.HasIndex("img_translation_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.HasIndex("user_id");

                    b.ToTable("blogs_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.CountrysModel.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("countries_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            status_id = 1,
                            title = "O'zbekiston"
                        },
                        new
                        {
                            id = 2,
                            status_id = 1,
                            title = "Boshqa"
                        });
                });

            modelBuilder.Entity("Entities.Model.CountrysModel.CountryTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("country_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("country_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("countries_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.DepartamentDetailsModel.DepartamentDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("departament_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("text_json")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("departament_id");

                    b.HasIndex("status_id");

                    b.ToTable("departament_details_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.DepartamentDetailsModel.DepartamentDetailTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("departament_detail_id")
                        .HasColumnType("integer");

                    b.Property<int?>("departament_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("text_json")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("departament_detail_id");

                    b.HasIndex("departament_translation_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("departament_details_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.DepartamentsModel.Departament", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("crated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("departament_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool?>("favorite")
                        .HasColumnType("boolean");

                    b.Property<string>("hemis_id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("img_icon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("img_id")
                        .HasColumnType("integer");

                    b.Property<int?>("parent_id")
                        .HasColumnType("integer");

                    b.Property<int?>("position")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("title_short")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("departament_type_id");

                    b.HasIndex("img_icon_id");

                    b.HasIndex("img_id");

                    b.HasIndex("status_id");

                    b.ToTable("departament_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9838),
                            departament_type_id = 1,
                            parent_id = 0,
                            status_id = 1,
                            title = "Rektor"
                        },
                        new
                        {
                            id = 2,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9841),
                            departament_type_id = 2,
                            parent_id = 1,
                            status_id = 1,
                            title = "Rektorning birinchi o'rinbosari (xorijiy mutaxasis)"
                        },
                        new
                        {
                            id = 3,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9843),
                            departament_type_id = 3,
                            parent_id = 1,
                            status_id = 1,
                            title = "Universitetdagi istiqbolli va strategik vazifalarni amalga oshirish masalalari bo'yicha rektor maslahatchisi"
                        },
                        new
                        {
                            id = 4,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9844),
                            departament_type_id = 3,
                            parent_id = 1,
                            status_id = 1,
                            title = "Talabalar orasida ijtimoiy ma'naviy muhit barqarorligini ta'minlashga mas'ul bo'lgan rektor maslahatchisi"
                        },
                        new
                        {
                            id = 5,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9846),
                            departament_type_id = 4,
                            parent_id = 1,
                            status_id = 1,
                            title = "Kuzatuv kengashi"
                        },
                        new
                        {
                            id = 6,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9848),
                            departament_type_id = 4,
                            parent_id = 1,
                            status_id = 1,
                            title = "Jamoatchilik kengashi"
                        },
                        new
                        {
                            id = 7,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9850),
                            departament_type_id = 4,
                            parent_id = 1,
                            status_id = 1,
                            title = "Universitet kengashi"
                        },
                        new
                        {
                            id = 63,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9851),
                            departament_type_id = 7,
                            parent_id = 1,
                            status_id = 1,
                            title = "Birinchi bo'lim"
                        },
                        new
                        {
                            id = 64,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9853),
                            departament_type_id = 7,
                            parent_id = 1,
                            status_id = 1,
                            title = "Ta'lim sifatini nazorat qilish bo'limi"
                        },
                        new
                        {
                            id = 65,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9855),
                            departament_type_id = 20,
                            parent_id = 1,
                            status_id = 1,
                            title = "Ichki audit va moliyaviy nazorat xizmati"
                        },
                        new
                        {
                            id = 66,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9857),
                            departament_type_id = 7,
                            parent_id = 1,
                            status_id = 1,
                            title = "Korrupsiyaga qarshi kurashish \"Komplaens - nazorat\" tizimini boshqarish bo'limi"
                        },
                        new
                        {
                            id = 67,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9859),
                            departament_type_id = 21,
                            parent_id = 1,
                            status_id = 1,
                            title = "OTM kengashi kotibi"
                        },
                        new
                        {
                            id = 69,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9861),
                            departament_type_id = 20,
                            parent_id = 1,
                            status_id = 1,
                            title = "Rektor yordamchisi - protokol xizmati"
                        },
                        new
                        {
                            id = 70,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9863),
                            departament_type_id = 23,
                            parent_id = 1,
                            status_id = 1,
                            title = "Yuriskonsult"
                        },
                        new
                        {
                            id = 71,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9864),
                            departament_type_id = 20,
                            parent_id = 1,
                            status_id = 1,
                            title = "Matbuot xizmati"
                        },
                        new
                        {
                            id = 72,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9871),
                            departament_type_id = 7,
                            parent_id = 1,
                            status_id = 1,
                            title = "Inson resurslarini boshqarish bo'limi"
                        },
                        new
                        {
                            id = 73,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9873),
                            departament_type_id = 7,
                            parent_id = 1,
                            status_id = 1,
                            title = "Jismomniy va yuridik shaxslarning murojaatlari bilan ishlash, nazorat va monitoring bo'limi"
                        },
                        new
                        {
                            id = 74,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9875),
                            departament_type_id = 24,
                            parent_id = 1,
                            status_id = 1,
                            title = "Devonxona"
                        },
                        new
                        {
                            id = 75,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9876),
                            departament_type_id = 25,
                            parent_id = 1,
                            status_id = 1,
                            title = "Arxiv"
                        },
                        new
                        {
                            id = 76,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9885),
                            departament_type_id = 7,
                            parent_id = 1,
                            status_id = 1,
                            title = "Xalqaro rwytinglar bilan ishlash bo'limi"
                        },
                        new
                        {
                            id = 77,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9886),
                            departament_type_id = 7,
                            parent_id = 1,
                            status_id = 1,
                            title = "Raqamli transformatsiya bo'limi"
                        },
                        new
                        {
                            id = 8,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9888),
                            departament_type_id = 2,
                            parent_id = 1,
                            status_id = 1,
                            title = "Akademik faoliyat bo'yicha prorektor"
                        },
                        new
                        {
                            id = 14,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9891),
                            departament_type_id = 5,
                            parent_id = 8,
                            status_id = 1,
                            title = "Akademik faoliyati boshqarmasi"
                        },
                        new
                        {
                            id = 15,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9892),
                            departament_type_id = 6,
                            parent_id = 8,
                            status_id = 1,
                            title = "Raqamli ta'lim texnologiyalari markazi"
                        },
                        new
                        {
                            id = 16,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9894),
                            departament_type_id = 6,
                            parent_id = 8,
                            status_id = 1,
                            title = "Axborot - resurs markazi"
                        },
                        new
                        {
                            id = 17,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9896),
                            departament_type_id = 7,
                            parent_id = 8,
                            status_id = 1,
                            title = "Tahririy nashriyoti va poligrafiya bo'limi"
                        },
                        new
                        {
                            id = 18,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9897),
                            departament_type_id = 7,
                            parent_id = 8,
                            status_id = 1,
                            title = "Magistratura bo'limi"
                        },
                        new
                        {
                            id = 19,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9899),
                            departament_type_id = 7,
                            parent_id = 8,
                            status_id = 1,
                            title = "Sirtqi bo'lim"
                        },
                        new
                        {
                            id = 20,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9901),
                            departament_type_id = 8,
                            parent_id = 8,
                            status_id = 1,
                            title = "O'quv ishlari bo'yicha assistent"
                        },
                        new
                        {
                            id = 21,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9903),
                            departament_type_id = 6,
                            parent_id = 8,
                            status_id = 1,
                            title = "Talabalarga xizmat ko'rsatish markazi (Ofis registrator)"
                        },
                        new
                        {
                            id = 26,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9905),
                            departament_type_id = 11,
                            parent_id = 21,
                            status_id = 1,
                            title = "Akademik mobillilikni muvofiqlashtirish va talabalar registratsiyasi (admission ofisi) sektori"
                        },
                        new
                        {
                            id = 27,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9907),
                            departament_type_id = 11,
                            parent_id = 21,
                            status_id = 1,
                            title = "Talabalar bilan ishlash sektori"
                        },
                        new
                        {
                            id = 28,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9909),
                            departament_type_id = 7,
                            parent_id = 21,
                            status_id = 1,
                            title = "Ikkinchi bo'lim"
                        },
                        new
                        {
                            id = 29,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9910),
                            departament_type_id = 7,
                            parent_id = 21,
                            status_id = 1,
                            title = "Talabalarni turar joy bilan ta'minlash ishlarini muvofiqlashtiruvchi bo'lim"
                        },
                        new
                        {
                            id = 22,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9913),
                            departament_type_id = 9,
                            parent_id = 8,
                            status_id = 1,
                            title = "Akademik litsey"
                        },
                        new
                        {
                            id = 23,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9915),
                            departament_type_id = 10,
                            parent_id = 8,
                            status_id = 1,
                            title = "Andijon transport texnikumi"
                        },
                        new
                        {
                            id = 24,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9916),
                            departament_type_id = 10,
                            parent_id = 8,
                            status_id = 1,
                            title = "Samarqand temir yo'l texnikumi"
                        },
                        new
                        {
                            id = 25,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9918),
                            departament_type_id = 10,
                            parent_id = 8,
                            status_id = 1,
                            title = "Nukus transport texnikumi"
                        },
                        new
                        {
                            id = 9,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9920),
                            departament_type_id = 2,
                            parent_id = 1,
                            status_id = 1,
                            title = "Yoshlar masalalari va ma'naviy - ma'rifiy ishlar bo'yicha birinchi prorektor"
                        },
                        new
                        {
                            id = 30,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9921),
                            departament_type_id = 7,
                            parent_id = 9,
                            status_id = 1,
                            title = "Yoshlar bilan ishlash, ma'naviy - ma'rifat bo'limi"
                        },
                        new
                        {
                            id = 31,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9923),
                            departament_type_id = 14,
                            parent_id = 9,
                            status_id = 1,
                            title = "Muzey"
                        },
                        new
                        {
                            id = 32,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9925),
                            departament_type_id = 15,
                            parent_id = 9,
                            status_id = 1,
                            title = "Psixolog"
                        },
                        new
                        {
                            id = 33,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9926),
                            departament_type_id = 16,
                            parent_id = 9,
                            status_id = 1,
                            title = "Sport inshootlari"
                        },
                        new
                        {
                            id = 34,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9928),
                            departament_type_id = 4,
                            parent_id = 9,
                            status_id = 1,
                            title = "Xotin - qizlar maslahat kengashi"
                        },
                        new
                        {
                            id = 35,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9930),
                            departament_type_id = 18,
                            parent_id = 9,
                            status_id = 1,
                            title = "TTJ (administratsiya va ishchi xodimlar)"
                        },
                        new
                        {
                            id = 36,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9932),
                            departament_type_id = 4,
                            parent_id = 9,
                            status_id = 1,
                            title = "Talabalar kengashi"
                        },
                        new
                        {
                            id = 37,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9934),
                            departament_type_id = 7,
                            parent_id = 9,
                            status_id = 1,
                            title = "Yoshlar ittifoqi"
                        },
                        new
                        {
                            id = 10,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9935),
                            departament_type_id = 2,
                            parent_id = 1,
                            status_id = 1,
                            title = "Ilmiy ishlar va innovatsiyalar bo'yicha prorektor"
                        },
                        new
                        {
                            id = 38,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9937),
                            departament_type_id = 7,
                            parent_id = 10,
                            status_id = 1,
                            title = "Ilmiy - tadqiqotlar, innovatsiyalar va ilmiy - pedagofik kadrlar tayyorlash bo'limi"
                        },
                        new
                        {
                            id = 39,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9939),
                            departament_type_id = 7,
                            parent_id = 10,
                            status_id = 1,
                            title = "Iqtidorli talabalarning ilmiy - tadqiqit faoliyatini tashkil etish bo'limi"
                        },
                        new
                        {
                            id = 40,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9940),
                            departament_type_id = 7,
                            parent_id = 10,
                            status_id = 1,
                            title = "Ilmiy - innovatsion va loyiha - konstruktorlik bo'limi"
                        },
                        new
                        {
                            id = 41,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9942),
                            departament_type_id = 7,
                            parent_id = 10,
                            status_id = 1,
                            title = "Ilmiy nashrlar bilan ishlash bo'limi"
                        },
                        new
                        {
                            id = 42,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9944),
                            departament_type_id = 4,
                            parent_id = 10,
                            status_id = 1,
                            title = "Ixtisoslashtirilgan ilmiy kengashlar"
                        },
                        new
                        {
                            id = 43,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9945),
                            departament_type_id = 7,
                            parent_id = 10,
                            status_id = 1,
                            title = "Ilmiy - innovatsion ishlanmalarni tijoratlashtirish bo'limi"
                        },
                        new
                        {
                            id = 44,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9947),
                            departament_type_id = 6,
                            parent_id = 10,
                            status_id = 1,
                            title = "Ilmiy - tadqiqot markazlari"
                        },
                        new
                        {
                            id = 45,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9949),
                            departament_type_id = 8,
                            parent_id = 10,
                            status_id = 1,
                            title = "Tadqiqot ishlari bo'yicha assistent"
                        },
                        new
                        {
                            id = 11,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9951),
                            departament_type_id = 2,
                            parent_id = 1,
                            status_id = 1,
                            title = "Xalqaro hamkorlik bo'yicha prorektor"
                        },
                        new
                        {
                            id = 46,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9953),
                            departament_type_id = 5,
                            parent_id = 11,
                            status_id = 1,
                            title = "Xalqaro hamkorlik boshqarmasi"
                        },
                        new
                        {
                            id = 47,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9955),
                            departament_type_id = 7,
                            parent_id = 11,
                            status_id = 1,
                            title = "Akademik mobillik va xorijiy grantlar va institutlar bilan ishlash bo'limi"
                        },
                        new
                        {
                            id = 48,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9956),
                            departament_type_id = 7,
                            parent_id = 11,
                            status_id = 1,
                            title = "Xalqaro ta'lim dasturlari bilan ishlash bo'limi"
                        },
                        new
                        {
                            id = 49,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9958),
                            departament_type_id = 6,
                            parent_id = 11,
                            status_id = 1,
                            title = "O'zbekiston - Turkiya hamkorlik markazi"
                        },
                        new
                        {
                            id = 50,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9959),
                            departament_type_id = 6,
                            parent_id = 11,
                            status_id = 1,
                            title = "\"Language Club\" Xorijiy tillar markazi"
                        },
                        new
                        {
                            id = 51,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9961),
                            departament_type_id = 6,
                            parent_id = 11,
                            status_id = 1,
                            title = "Xorij bilan hamkorlik markazlari"
                        },
                        new
                        {
                            id = 12,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9963),
                            departament_type_id = 2,
                            parent_id = 1,
                            status_id = 1,
                            title = "Moliya - iqtisod ishlari bo'yicha prorektor"
                        },
                        new
                        {
                            id = 52,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9970),
                            departament_type_id = 7,
                            parent_id = 12,
                            status_id = 1,
                            title = "Moliyalashtirish, buxgalteriya hisobi, hisoboti va tahlili bo'limi - Bosh hisobchi"
                        },
                        new
                        {
                            id = 53,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9972),
                            departament_type_id = 5,
                            parent_id = 12,
                            status_id = 1,
                            title = "Ishlar boshqarmasi"
                        },
                        new
                        {
                            id = 56,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9973),
                            departament_type_id = 7,
                            parent_id = 53,
                            status_id = 1,
                            title = "Xo'jalik bo'limi"
                        },
                        new
                        {
                            id = 57,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9975),
                            departament_type_id = 7,
                            parent_id = 53,
                            status_id = 1,
                            title = "Texnik ta'mirlash va tezkor qayta tiklash bo'limi"
                        },
                        new
                        {
                            id = 58,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9977),
                            departament_type_id = 7,
                            parent_id = 53,
                            status_id = 1,
                            title = "Fuqaro va mehnat muhofazasi bo'limi"
                        },
                        new
                        {
                            id = 59,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9978),
                            departament_type_id = 19,
                            parent_id = 53,
                            status_id = 1,
                            title = "Qozonxona"
                        },
                        new
                        {
                            id = 60,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9980),
                            departament_type_id = 7,
                            parent_id = 53,
                            status_id = 1,
                            title = "Transport xizmati bo'limi"
                        },
                        new
                        {
                            id = 61,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9982),
                            departament_type_id = 7,
                            parent_id = 53,
                            status_id = 1,
                            title = "Xavfsizlik xizmati bo'limi"
                        },
                        new
                        {
                            id = 54,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9984),
                            departament_type_id = 12,
                            parent_id = 12,
                            status_id = 1,
                            title = "O'quv amaliyot poligoni"
                        },
                        new
                        {
                            id = 55,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9985),
                            departament_type_id = 13,
                            parent_id = 12,
                            status_id = 1,
                            title = "Omborxona"
                        },
                        new
                        {
                            id = 13,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9987),
                            departament_type_id = 2,
                            parent_id = 1,
                            status_id = 1,
                            title = "Ishlab chiqarish korxonalar bilan integratsiya bo'yicha prorektor"
                        },
                        new
                        {
                            id = 62,
                            crated_at = new DateTime(2024, 7, 30, 5, 32, 42, 955, DateTimeKind.Utc).AddTicks(9989),
                            departament_type_id = 6,
                            parent_id = 13,
                            status_id = 1,
                            title = "Karera markazi"
                        });
                });

            modelBuilder.Entity("Entities.Model.DepartamentsModel.DepartamentTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("crated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("departament_id")
                        .HasColumnType("integer");

                    b.Property<int?>("departament_type_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool?>("favorite")
                        .HasColumnType("boolean");

                    b.Property<int?>("img_icon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("img_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("parent_id")
                        .HasColumnType("integer");

                    b.Property<int?>("position")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("title_short")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("departament_id");

                    b.HasIndex("departament_type_translation_id");

                    b.HasIndex("img_icon_id");

                    b.HasIndex("img_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("departament_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.DepartamentsTypeModel.DepartamentType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("departament_types_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            status_id = 1,
                            type = "Rektor"
                        },
                        new
                        {
                            id = 2,
                            status_id = 1,
                            type = "Rektor yordamchisi"
                        },
                        new
                        {
                            id = 3,
                            status_id = 1,
                            type = "Rektor maslahatchisi"
                        },
                        new
                        {
                            id = 4,
                            status_id = 1,
                            type = "Kengash"
                        },
                        new
                        {
                            id = 5,
                            status_id = 1,
                            type = "Boshqarma"
                        },
                        new
                        {
                            id = 6,
                            status_id = 1,
                            type = "Markaz"
                        },
                        new
                        {
                            id = 7,
                            status_id = 1,
                            type = "Bo'lim"
                        },
                        new
                        {
                            id = 8,
                            status_id = 1,
                            type = "Assistent"
                        },
                        new
                        {
                            id = 9,
                            status_id = 1,
                            type = "Litsey"
                        },
                        new
                        {
                            id = 10,
                            status_id = 1,
                            type = "Texnikum"
                        },
                        new
                        {
                            id = 11,
                            status_id = 1,
                            type = "Sektor"
                        },
                        new
                        {
                            id = 12,
                            status_id = 1,
                            type = "Poligon"
                        },
                        new
                        {
                            id = 13,
                            status_id = 1,
                            type = "Omborxona"
                        },
                        new
                        {
                            id = 14,
                            status_id = 1,
                            type = "Muzey"
                        },
                        new
                        {
                            id = 15,
                            status_id = 1,
                            type = "Psixolog"
                        },
                        new
                        {
                            id = 16,
                            status_id = 1,
                            type = "Inshoot"
                        },
                        new
                        {
                            id = 18,
                            status_id = 1,
                            type = "TTJ"
                        },
                        new
                        {
                            id = 19,
                            status_id = 1,
                            type = "Qozonxona"
                        },
                        new
                        {
                            id = 20,
                            status_id = 1,
                            type = "Xizmat"
                        },
                        new
                        {
                            id = 21,
                            status_id = 1,
                            type = "Kotib"
                        },
                        new
                        {
                            id = 22,
                            status_id = 1,
                            type = "Fakultet"
                        },
                        new
                        {
                            id = 23,
                            status_id = 1,
                            type = "Yuriskonsult"
                        },
                        new
                        {
                            id = 24,
                            status_id = 1,
                            type = "Devonxona"
                        },
                        new
                        {
                            id = 25,
                            status_id = 1,
                            type = "Arxiv"
                        });
                });

            modelBuilder.Entity("Entities.Model.DepartamentsTypeModel.DepartamentTypeTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("departament_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("id");

                    b.HasIndex("departament_type_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("departament_types_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.DistrictsModel.District", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<int?>("territorie_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.HasIndex("territorie_id");

                    b.ToTable("districts_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Boʻzatov tumani"
                        },
                        new
                        {
                            id = 3,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Bandixon tumani"
                        },
                        new
                        {
                            id = 4,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Tuproqqal''a tumani"
                        },
                        new
                        {
                            id = 10,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Nukus shahar"
                        },
                        new
                        {
                            id = 12,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Amudaryo tumani"
                        },
                        new
                        {
                            id = 13,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Beruniy tumani"
                        },
                        new
                        {
                            id = 14,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Qonlikoʻl tumani"
                        },
                        new
                        {
                            id = 15,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Qoraoʻzak tumani"
                        },
                        new
                        {
                            id = 16,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Kegeyli tumani"
                        },
                        new
                        {
                            id = 17,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Qoʻngʻirot tumani"
                        },
                        new
                        {
                            id = 18,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Muynoq tumani"
                        },
                        new
                        {
                            id = 19,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Nukus tumani"
                        },
                        new
                        {
                            id = 20,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Taxtakoʻprik tumani"
                        },
                        new
                        {
                            id = 21,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Toʻrtkoʻl tumani"
                        },
                        new
                        {
                            id = 22,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Xoʻjayli tumani"
                        },
                        new
                        {
                            id = 23,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Chimboy tumani"
                        },
                        new
                        {
                            id = 24,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Shoʻmanay tumani"
                        },
                        new
                        {
                            id = 25,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Ellikqal''a tumani"
                        },
                        new
                        {
                            id = 26,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Buxoro shahar"
                        },
                        new
                        {
                            id = 27,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Buxoro tuman"
                        },
                        new
                        {
                            id = 28,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Vobkent tuman"
                        },
                        new
                        {
                            id = 29,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Gʻijduvon tuman"
                        },
                        new
                        {
                            id = 30,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Jondor tuman"
                        },
                        new
                        {
                            id = 32,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Kogon tuman"
                        },
                        new
                        {
                            id = 33,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Olot tuman"
                        },
                        new
                        {
                            id = 34,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Peshku tuman"
                        },
                        new
                        {
                            id = 35,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Romitan tuman"
                        },
                        new
                        {
                            id = 36,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Shofirkon tuman"
                        },
                        new
                        {
                            id = 37,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Qorakoʻl tuman"
                        },
                        new
                        {
                            id = 38,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Qorovulbozor tuman"
                        },
                        new
                        {
                            id = 39,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Samarqand shahar"
                        },
                        new
                        {
                            id = 40,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Oqdaryo tumani"
                        },
                        new
                        {
                            id = 41,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Bulungʻur tumani"
                        },
                        new
                        {
                            id = 42,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Jomboy tumani"
                        },
                        new
                        {
                            id = 43,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Kattaqoʻrgʻon tumani"
                        },
                        new
                        {
                            id = 44,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Kattaqoʻrgʻon shahar"
                        },
                        new
                        {
                            id = 45,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Qoʻshrabod tumani"
                        },
                        new
                        {
                            id = 46,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Narpay tumani"
                        },
                        new
                        {
                            id = 47,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Nurobod tumani"
                        },
                        new
                        {
                            id = 48,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Payariq tumani"
                        },
                        new
                        {
                            id = 49,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Pastdargʻom tumani"
                        },
                        new
                        {
                            id = 50,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Paxtachi tumani"
                        },
                        new
                        {
                            id = 51,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Samarqand tumani"
                        },
                        new
                        {
                            id = 53,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Tayloq tumani"
                        },
                        new
                        {
                            id = 54,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Urgut tumani"
                        },
                        new
                        {
                            id = 55,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Navoiy shahar"
                        },
                        new
                        {
                            id = 56,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Karmana tumani"
                        },
                        new
                        {
                            id = 57,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Navbaxor tumani"
                        },
                        new
                        {
                            id = 58,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Nurota tumani - Gʻozgʻon shahri"
                        },
                        new
                        {
                            id = 59,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Xatirchi tumani"
                        },
                        new
                        {
                            id = 60,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Qiziltepa tumani"
                        },
                        new
                        {
                            id = 61,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Konimex tumani"
                        },
                        new
                        {
                            id = 62,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Uchquduq tumani"
                        },
                        new
                        {
                            id = 63,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Zarafshon shahar"
                        },
                        new
                        {
                            id = 64,
                            status_id = 1,
                            territorie_id = 11,
                            title = "Tomdi tumani"
                        },
                        new
                        {
                            id = 65,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Andijon shahar"
                        },
                        new
                        {
                            id = 66,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Xonobod shahar"
                        },
                        new
                        {
                            id = 67,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Andijon tumani"
                        },
                        new
                        {
                            id = 68,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Asaka tumani"
                        },
                        new
                        {
                            id = 69,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Baliqchi tumani"
                        },
                        new
                        {
                            id = 70,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Boʻz tumani"
                        },
                        new
                        {
                            id = 71,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Buloqboshi tumani"
                        },
                        new
                        {
                            id = 72,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Jalolquduq tumani"
                        },
                        new
                        {
                            id = 73,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Izboskan tumani"
                        },
                        new
                        {
                            id = 74,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Ulugʻnor tumani"
                        },
                        new
                        {
                            id = 75,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Qoʻrgʻontepa tumani"
                        },
                        new
                        {
                            id = 76,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Marxamat tumani"
                        },
                        new
                        {
                            id = 77,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Oltinkoʻl tumani"
                        },
                        new
                        {
                            id = 78,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Paxtaobod tumani"
                        },
                        new
                        {
                            id = 79,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Hoʻjaobod tumani"
                        },
                        new
                        {
                            id = 80,
                            status_id = 1,
                            territorie_id = 12,
                            title = "Shaxrixon tumani"
                        },
                        new
                        {
                            id = 82,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Margʻilon shahar"
                        },
                        new
                        {
                            id = 83,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Fargʻona shahar"
                        },
                        new
                        {
                            id = 84,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Quvasoy shahar"
                        },
                        new
                        {
                            id = 85,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Qoʻqon shahar"
                        },
                        new
                        {
                            id = 86,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Bogʻdod tumani"
                        },
                        new
                        {
                            id = 87,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Beshariq tumani"
                        },
                        new
                        {
                            id = 88,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Buvayda tumani"
                        },
                        new
                        {
                            id = 89,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Dangʻara tumani"
                        },
                        new
                        {
                            id = 90,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Yozyovon tumani"
                        },
                        new
                        {
                            id = 91,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Oltiariq tumani"
                        },
                        new
                        {
                            id = 92,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Qoʻshtepa tumani"
                        },
                        new
                        {
                            id = 93,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Rishton tumani"
                        },
                        new
                        {
                            id = 94,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Soʻx tumani"
                        },
                        new
                        {
                            id = 95,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Toshloq tumani"
                        },
                        new
                        {
                            id = 96,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Uchkoʻprik tumani"
                        },
                        new
                        {
                            id = 97,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Fargʻona tumani"
                        },
                        new
                        {
                            id = 98,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Furqat tumani"
                        },
                        new
                        {
                            id = 99,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Oʻzbekiston tumani"
                        },
                        new
                        {
                            id = 100,
                            status_id = 1,
                            territorie_id = 13,
                            title = "Quva tumani"
                        },
                        new
                        {
                            id = 101,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Angor tumani"
                        },
                        new
                        {
                            id = 102,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Boysun tumani"
                        },
                        new
                        {
                            id = 103,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Denov tumani"
                        },
                        new
                        {
                            id = 104,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Jarqoʻrgʻon tumani"
                        },
                        new
                        {
                            id = 105,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Qiziriq tumani"
                        },
                        new
                        {
                            id = 106,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Qumqoʻrgʻon tumani"
                        },
                        new
                        {
                            id = 107,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Muzrabot tumani"
                        },
                        new
                        {
                            id = 108,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Oltinsoy tumani"
                        },
                        new
                        {
                            id = 109,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Sariosiyo tumani"
                        },
                        new
                        {
                            id = 110,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Termiz tumani"
                        },
                        new
                        {
                            id = 111,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Termiz shahar"
                        },
                        new
                        {
                            id = 112,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Uzun tumani"
                        },
                        new
                        {
                            id = 113,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Sherobod tumani"
                        },
                        new
                        {
                            id = 114,
                            status_id = 1,
                            territorie_id = 14,
                            title = "Shoʻrchi tumani"
                        },
                        new
                        {
                            id = 115,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Oqoltin tumani"
                        },
                        new
                        {
                            id = 116,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Boyovut tumani"
                        },
                        new
                        {
                            id = 117,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Guliston tumani"
                        },
                        new
                        {
                            id = 118,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Mirzaobod tumani"
                        },
                        new
                        {
                            id = 119,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Sayxunobod tumani"
                        },
                        new
                        {
                            id = 120,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Sirdaryo tumani"
                        },
                        new
                        {
                            id = 121,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Sardoba tumani"
                        },
                        new
                        {
                            id = 122,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Xovos tumani"
                        },
                        new
                        {
                            id = 123,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Guliston shahar"
                        },
                        new
                        {
                            id = 124,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Shirin shahar"
                        },
                        new
                        {
                            id = 126,
                            status_id = 1,
                            territorie_id = 15,
                            title = "Yangier shahar"
                        },
                        new
                        {
                            id = 127,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Urganch shahar"
                        },
                        new
                        {
                            id = 128,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Bogʻot tumani"
                        },
                        new
                        {
                            id = 129,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Gurlan tumani"
                        },
                        new
                        {
                            id = 130,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Xozarasp tumani"
                        },
                        new
                        {
                            id = 131,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Xiva tumani"
                        },
                        new
                        {
                            id = 132,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Xonqa tumani"
                        },
                        new
                        {
                            id = 133,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Urganch tumani"
                        },
                        new
                        {
                            id = 134,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Qoʻshkoʻpir tumani"
                        },
                        new
                        {
                            id = 135,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Shovot tumani"
                        },
                        new
                        {
                            id = 136,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Yangiariq tumani"
                        },
                        new
                        {
                            id = 137,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Yangibozor tumani"
                        },
                        new
                        {
                            id = 138,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Angren shahar"
                        },
                        new
                        {
                            id = 139,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Bekobod shahar"
                        },
                        new
                        {
                            id = 140,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Olmaliq shahar"
                        },
                        new
                        {
                            id = 141,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Chirchiq shahar"
                        },
                        new
                        {
                            id = 142,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Bekobod tumani"
                        },
                        new
                        {
                            id = 143,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Boʻka tumani"
                        },
                        new
                        {
                            id = 144,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Boʻstonliq tumani"
                        },
                        new
                        {
                            id = 145,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Qibray tumani"
                        },
                        new
                        {
                            id = 146,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Zangiota tumani"
                        },
                        new
                        {
                            id = 148,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Quyichirchiq tumani"
                        },
                        new
                        {
                            id = 149,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Oqqoʻrgʻon tumani"
                        },
                        new
                        {
                            id = 150,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Oxongaron tumani"
                        },
                        new
                        {
                            id = 151,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Parkent tumani"
                        },
                        new
                        {
                            id = 152,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Pskent tumani"
                        },
                        new
                        {
                            id = 153,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Oʻrtachirchiq tumani - Yangihayot tumani"
                        },
                        new
                        {
                            id = 154,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Chinoz tumani"
                        },
                        new
                        {
                            id = 155,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Yuqorichirchiq tumani"
                        },
                        new
                        {
                            id = 156,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Yangiyoʻl tumani - Yangihayot tumani"
                        },
                        new
                        {
                            id = 158,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Qarshi shahar"
                        },
                        new
                        {
                            id = 159,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Gʻuzor tumani"
                        },
                        new
                        {
                            id = 160,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Qarshi tumani"
                        },
                        new
                        {
                            id = 161,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Kasbi tumani"
                        },
                        new
                        {
                            id = 162,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Koson tumani"
                        },
                        new
                        {
                            id = 163,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Kitob tumani"
                        },
                        new
                        {
                            id = 164,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Mirishkor tumani"
                        },
                        new
                        {
                            id = 165,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Muborak tumani"
                        },
                        new
                        {
                            id = 166,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Nishon tumani"
                        },
                        new
                        {
                            id = 167,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Chiroqchi tumani"
                        },
                        new
                        {
                            id = 168,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Shaxrisabz tumani"
                        },
                        new
                        {
                            id = 170,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Qamashi tumani"
                        },
                        new
                        {
                            id = 171,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Dexqonobod tumani"
                        },
                        new
                        {
                            id = 172,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Yakkabogʻ tumani"
                        },
                        new
                        {
                            id = 173,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Jizzax shahar"
                        },
                        new
                        {
                            id = 174,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Baxmal tumani"
                        },
                        new
                        {
                            id = 175,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Doʻstlik tumani"
                        },
                        new
                        {
                            id = 176,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Gʻallaorol tumani"
                        },
                        new
                        {
                            id = 177,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Sh.Rashidov tumani"
                        },
                        new
                        {
                            id = 178,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Zarbdor tumani"
                        },
                        new
                        {
                            id = 179,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Zafarobod tumani"
                        },
                        new
                        {
                            id = 180,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Zomin tumani"
                        },
                        new
                        {
                            id = 181,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Paxtakor tumani"
                        },
                        new
                        {
                            id = 182,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Mirzachoʻl tumani"
                        },
                        new
                        {
                            id = 183,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Forish tumani"
                        },
                        new
                        {
                            id = 184,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Yangiobod tumani"
                        },
                        new
                        {
                            id = 185,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Namangan shahar"
                        },
                        new
                        {
                            id = 186,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Mingbuloq tumani"
                        },
                        new
                        {
                            id = 189,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Pop tumani"
                        },
                        new
                        {
                            id = 190,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Norin tumani"
                        },
                        new
                        {
                            id = 191,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Toʻraqoʻrgʻon tumani"
                        },
                        new
                        {
                            id = 192,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Uychi tumani"
                        },
                        new
                        {
                            id = 194,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Chortoq tumani"
                        },
                        new
                        {
                            id = 195,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Chust tumani"
                        },
                        new
                        {
                            id = 196,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Yangiqoʻrgʻon tumani"
                        },
                        new
                        {
                            id = 198,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Yunusobod tumani"
                        },
                        new
                        {
                            id = 199,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Mirobod tumani"
                        },
                        new
                        {
                            id = 200,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Yakkasaroy tumani"
                        },
                        new
                        {
                            id = 201,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Olmazor tumani"
                        },
                        new
                        {
                            id = 202,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Bektemir tumani - Yangihayot tumani"
                        },
                        new
                        {
                            id = 203,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Yashnobod tumani"
                        },
                        new
                        {
                            id = 204,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Chilonzor tumani"
                        },
                        new
                        {
                            id = 205,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Uchtepa tumani"
                        },
                        new
                        {
                            id = 207,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Mirzo Ulugʻbek tumani"
                        },
                        new
                        {
                            id = 208,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Sergeli tumani - Yangihayot tumani"
                        },
                        new
                        {
                            id = 209,
                            status_id = 1,
                            territorie_id = 10,
                            title = "Ishtixon tumani"
                        },
                        new
                        {
                            id = 210,
                            status_id = 1,
                            territorie_id = 9,
                            title = "Kogon shahar"
                        },
                        new
                        {
                            id = 211,
                            status_id = 1,
                            territorie_id = 19,
                            title = "Arnasoy tumani"
                        },
                        new
                        {
                            id = 212,
                            status_id = 1,
                            territorie_id = 22,
                            title = "Shayxontoxur tumani"
                        },
                        new
                        {
                            id = 214,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Namangan tumani"
                        },
                        new
                        {
                            id = 215,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Uchqoʻrgʻon tumani"
                        },
                        new
                        {
                            id = 216,
                            status_id = 1,
                            territorie_id = 21,
                            title = "Kosonsoy tumani"
                        },
                        new
                        {
                            id = 217,
                            status_id = 1,
                            territorie_id = 16,
                            title = "Xiva shahar"
                        },
                        new
                        {
                            id = 218,
                            status_id = 1,
                            territorie_id = 8,
                            title = "Taxiatosh"
                        },
                        new
                        {
                            id = 219,
                            status_id = 1,
                            territorie_id = 18,
                            title = "Shaxrisabz shahar"
                        },
                        new
                        {
                            id = 220,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Toshkent tumani"
                        },
                        new
                        {
                            id = 221,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Yangiyoʻl shahar"
                        },
                        new
                        {
                            id = 222,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Ohangaron shahar"
                        },
                        new
                        {
                            id = 223,
                            status_id = 1,
                            territorie_id = 17,
                            title = "Nurafshon shahar"
                        });
                });

            modelBuilder.Entity("Entities.Model.DistrictsModel.DistrictTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("district_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("territorie_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("district_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.HasIndex("territorie_translation_id");

                    b.ToTable("districts_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.DocumentTeacher110Model.DocumentTeacher110", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("document_sequence_string")
                        .HasColumnType("text");

                    b.Property<bool?>("indicator")
                        .HasColumnType("boolean");

                    b.Property<double?>("max_score")
                        .HasColumnType("double precision");

                    b.Property<bool?>("one_indicator")
                        .HasColumnType("boolean");

                    b.Property<int?>("parent_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<bool?>("two_indicator")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("document_teacher_110_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.DocumentTeacher110Model.DocumentTeacher110Set", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<int?>("document_id")
                        .HasColumnType("integer");

                    b.Property<int?>("file_id")
                        .HasColumnType("integer");

                    b.Property<int?>("new_year")
                        .HasColumnType("integer");

                    b.Property<int?>("old_year")
                        .HasColumnType("integer");

                    b.Property<int?>("person_id")
                        .HasColumnType("integer");

                    b.Property<string>("reason_for_rejection")
                        .HasColumnType("text");

                    b.Property<double?>("score")
                        .HasColumnType("double precision");

                    b.Property<int?>("sequence_status")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("document_id");

                    b.HasIndex("file_id");

                    b.HasIndex("person_id");

                    b.HasIndex("status_id");

                    b.ToTable("document_teacher_110_set_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.EmployeeTypesModel.EmployeeType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("employee_types_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.EmployeeTypesModel.EmployeeTypeTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("employee_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("employee_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("employee_types_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.EmploymentModel.Employment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("employments_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            status_id = 1,
                            title = "Band"
                        },
                        new
                        {
                            id = 2,
                            status_id = 1,
                            title = "Ishsiz"
                        },
                        new
                        {
                            id = 3,
                            status_id = 1,
                            title = "Nafaqada"
                        },
                        new
                        {
                            id = 4,
                            status_id = 1,
                            title = "Talaba"
                        });
                });

            modelBuilder.Entity("Entities.Model.EmploymentModel.EmploymentTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("employment_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("employment_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("employments_translations_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            employment_id = 1,
                            language_id = 1,
                            status_translation_id = 1,
                            title = "Busy"
                        },
                        new
                        {
                            id = 2,
                            employment_id = 2,
                            language_id = 1,
                            status_translation_id = 1,
                            title = "Unemployed"
                        },
                        new
                        {
                            id = 3,
                            employment_id = 3,
                            language_id = 1,
                            status_translation_id = 1,
                            title = "Retired"
                        },
                        new
                        {
                            id = 4,
                            employment_id = 4,
                            language_id = 1,
                            status_translation_id = 1,
                            title = "Student"
                        });
                });

            modelBuilder.Entity("Entities.Model.FileModel.Files", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("crated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("url")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.HasIndex("title")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("files_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.FileModel.FilesTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("crated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("files_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("url")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("files_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.HasIndex("title")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("files_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.GenderModel.Gender", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("gender")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("genders_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            gender = "Erkak",
                            status_id = 1
                        },
                        new
                        {
                            id = 2,
                            gender = "Ayol",
                            status_id = 1
                        });
                });

            modelBuilder.Entity("Entities.Model.GenderModel.GenderTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("gender")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("gender_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("gender_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("genders_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.InteractiveServicesModel.InteractiveServices", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool?>("favorite")
                        .HasColumnType("boolean");

                    b.Property<int?>("icon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("img_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("url_")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("id");

                    b.HasIndex("icon_id");

                    b.HasIndex("img_id");

                    b.HasIndex("status_id");

                    b.ToTable("interactive_services_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.InteractiveServicesModel.InteractiveServicesTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool?>("favorite")
                        .HasColumnType("boolean");

                    b.Property<int?>("icon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("img_id")
                        .HasColumnType("integer");

                    b.Property<int?>("interactive_services_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("url_")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("id");

                    b.HasIndex("icon_id");

                    b.HasIndex("img_id");

                    b.HasIndex("interactive_services_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("interactive_services_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.LanguagesModel.Language", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("details")
                        .HasColumnType("text");

                    b.Property<int?>("img_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("title_short")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("id");

                    b.HasIndex("img_id");

                    b.HasIndex("status_id");

                    b.ToTable("languages_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            code = "en",
                            status_id = 1,
                            title = "England"
                        },
                        new
                        {
                            id = 2,
                            code = "ru",
                            status_id = 1,
                            title = "Russian"
                        });
                });

            modelBuilder.Entity("Entities.Model.MenuModel.Menu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("blog_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("departament_id")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("high_menu")
                        .HasColumnType("integer");

                    b.Property<int?>("icon_id")
                        .HasColumnType("integer");

                    b.Property<string>("link_")
                        .HasColumnType("text");

                    b.Property<int?>("menu_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("page_id")
                        .HasColumnType("integer");

                    b.Property<int>("parent_id")
                        .HasColumnType("integer");

                    b.Property<int?>("position")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("top_menu")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("blog_id");

                    b.HasIndex("departament_id");

                    b.HasIndex("icon_id");

                    b.HasIndex("menu_type_id");

                    b.HasIndex("page_id");

                    b.HasIndex("status_id");

                    b.HasIndex("user_id");

                    b.ToTable("menu_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.MenuModel.MenuTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("blog_translation_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("departament_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("high_menu")
                        .HasColumnType("integer");

                    b.Property<int?>("icon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<string>("link_")
                        .HasColumnType("text");

                    b.Property<int?>("menu_id")
                        .HasColumnType("integer");

                    b.Property<int?>("menu_type_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("page_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("parent_id")
                        .HasColumnType("integer");

                    b.Property<int?>("position")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("top_menu")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("blog_translation_id");

                    b.HasIndex("departament_translation_id");

                    b.HasIndex("icon_id");

                    b.HasIndex("language_id");

                    b.HasIndex("menu_id");

                    b.HasIndex("menu_type_translation_id");

                    b.HasIndex("page_translation_id");

                    b.HasIndex("status_id");

                    b.HasIndex("user_id");

                    b.ToTable("menu_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.MenuTypesModel.MenuType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("menu_types_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            status_id = 1,
                            title = "Main"
                        },
                        new
                        {
                            id = 2,
                            status_id = 1,
                            title = "Blog"
                        },
                        new
                        {
                            id = 3,
                            status_id = 1,
                            title = "Page"
                        },
                        new
                        {
                            id = 4,
                            status_id = 1,
                            title = "Link"
                        },
                        new
                        {
                            id = 5,
                            status_id = 1,
                            title = "Faculty"
                        },
                        new
                        {
                            id = 6,
                            status_id = 1,
                            title = "Department"
                        },
                        new
                        {
                            id = 7,
                            status_id = 1,
                            title = "Section"
                        });
                });

            modelBuilder.Entity("Entities.Model.MenuTypesModel.MenuTypeTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("menu_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("language_id");

                    b.HasIndex("menu_type_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("menu_types_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.NeighborhoodsModel.Neighborhood", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("district_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("district_id");

                    b.HasIndex("status_id");

                    b.ToTable("neighborhoods_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.NeighborhoodsModel.NeighborhoodTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("district_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("neighborhood_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("district_translation_id");

                    b.HasIndex("language_id");

                    b.HasIndex("neighborhood_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("neighborhoods_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.PagesModel.PageTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("crated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool?>("favorite")
                        .HasColumnType("boolean");

                    b.Property<int?>("img_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("page_id")
                        .HasColumnType("integer");

                    b.Property<int?>("position")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("title_short")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("img_translation_id");

                    b.HasIndex("language_id");

                    b.HasIndex("page_id");

                    b.HasIndex("status_translation_id");

                    b.HasIndex("user_id");

                    b.ToTable("pages_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.PagesModel.Pages", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("crated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool?>("favorite")
                        .HasColumnType("boolean");

                    b.Property<int?>("img_id")
                        .HasColumnType("integer");

                    b.Property<int?>("position")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("title_short")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("img_id");

                    b.HasIndex("status_id");

                    b.HasIndex("user_id");

                    b.ToTable("pages_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.PersonDataModel.PersonData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("biography_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("blog_json")
                        .HasColumnType("text");

                    b.Property<string>("degree")
                        .HasColumnType("text");

                    b.Property<string>("experience_json")
                        .HasColumnType("text");

                    b.Property<int?>("experience_year")
                        .HasColumnType("integer");

                    b.Property<int?>("languages_any")
                        .HasColumnType("integer");

                    b.Property<string>("languages_any_title")
                        .HasColumnType("text");

                    b.Property<int?>("languages_en")
                        .HasColumnType("integer");

                    b.Property<int?>("languages_ru")
                        .HasColumnType("integer");

                    b.Property<int?>("languages_uz")
                        .HasColumnType("integer");

                    b.Property<string>("orchid")
                        .HasColumnType("text");

                    b.Property<int?>("persons_id")
                        .HasColumnType("integer");

                    b.Property<string>("phone_number1")
                        .HasColumnType("text");

                    b.Property<string>("phone_number2")
                        .HasColumnType("text");

                    b.Property<string>("portfolio_json")
                        .HasColumnType("text");

                    b.Property<string>("scientific_activity_json")
                        .HasColumnType("text");

                    b.Property<string>("scopus_id")
                        .HasColumnType("text");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("persons_id");

                    b.HasIndex("status_id");

                    b.ToTable("persons_data_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.PersonDataModel.PersonDataTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("biography_json")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("blog_json")
                        .HasColumnType("text");

                    b.Property<string>("degree")
                        .HasColumnType("text");

                    b.Property<string>("experience_json")
                        .HasColumnType("text");

                    b.Property<int?>("experience_year")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("languages_any")
                        .HasColumnType("integer");

                    b.Property<string>("languages_any_title")
                        .HasColumnType("text");

                    b.Property<int?>("languages_en")
                        .HasColumnType("integer");

                    b.Property<int?>("languages_ru")
                        .HasColumnType("integer");

                    b.Property<int?>("languages_uz")
                        .HasColumnType("integer");

                    b.Property<string>("orchid")
                        .HasColumnType("text");

                    b.Property<int?>("persons_data_id")
                        .HasColumnType("integer");

                    b.Property<int?>("persons_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("phone_number1")
                        .HasColumnType("text");

                    b.Property<string>("phone_number2")
                        .HasColumnType("text");

                    b.Property<string>("portfolio_json")
                        .HasColumnType("text");

                    b.Property<string>("scientific_activity_json")
                        .HasColumnType("text");

                    b.Property<string>("scopus_id")
                        .HasColumnType("text");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("language_id");

                    b.HasIndex("persons_data_id");

                    b.HasIndex("persons_translation_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("persons_data_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.PersonModel.Person", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("departament_id")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("employee_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("fathers_name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("firstName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("gender_id")
                        .HasColumnType("integer");

                    b.Property<int?>("img_id")
                        .HasColumnType("integer");

                    b.Property<string>("lastName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("passport_number")
                        .HasColumnType("text");

                    b.Property<string>("passport_text")
                        .HasColumnType("text");

                    b.Property<string>("pinfl")
                        .HasColumnType("text");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("departament_id");

                    b.HasIndex("employee_type_id");

                    b.HasIndex("gender_id");

                    b.HasIndex("img_id");

                    b.HasIndex("status_id");

                    b.ToTable("persons_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.PersonModel.PersonTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("departament_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("employee_type_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("fathers_name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("firstName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("gender_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<string>("lastName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("persons_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("departament_translation_id");

                    b.HasIndex("employee_type_translation_id");

                    b.HasIndex("gender_id");

                    b.HasIndex("language_id");

                    b.HasIndex("persons_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("persons_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.SiteDetailsModel.SiteDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("details")
                        .HasColumnType("text");

                    b.Property<int?>("favicon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("logo_b_id")
                        .HasColumnType("integer");

                    b.Property<int?>("logo_w_id")
                        .HasColumnType("integer");

                    b.Property<int?>("site_id")
                        .HasColumnType("integer");

                    b.Property<string>("socials")
                        .HasColumnType("text");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("favicon_id");

                    b.HasIndex("logo_b_id");

                    b.HasIndex("logo_w_id");

                    b.HasIndex("site_id");

                    b.HasIndex("status_id");

                    b.ToTable("site_details_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.SiteDetailsModel.SiteDetailTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("details")
                        .HasColumnType("text");

                    b.Property<int?>("favicon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("logo_b_id")
                        .HasColumnType("integer");

                    b.Property<int?>("logo_w_id")
                        .HasColumnType("integer");

                    b.Property<int?>("site_detail_id")
                        .HasColumnType("integer");

                    b.Property<int?>("site_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("socials")
                        .HasColumnType("text");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("update_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("favicon_id");

                    b.HasIndex("language_id");

                    b.HasIndex("logo_b_id");

                    b.HasIndex("logo_w_id");

                    b.HasIndex("site_detail_id");

                    b.HasIndex("site_translation_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("site_details_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.SiteTypesModel.SiteType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("site_types_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.SiteTypesModel.SiteTypeTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("site_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("language_id");

                    b.HasIndex("site_type_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("site_types_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.SitesModel.Site", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("site_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("site_type_id");

                    b.HasIndex("status_id");

                    b.HasIndex("user_id");

                    b.ToTable("sites_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.SitesModel.SiteTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("site_id")
                        .HasColumnType("integer");

                    b.Property<int?>("site_type_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("language_id");

                    b.HasIndex("site_id");

                    b.HasIndex("site_type_translation_id");

                    b.HasIndex("status_translation_id");

                    b.HasIndex("user_id");

                    b.ToTable("sites_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.StatisticalNumbersModel.StatisticalNumbers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("icon_id")
                        .HasColumnType("integer");

                    b.Property<string>("numbers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("icon_id");

                    b.HasIndex("status_id");

                    b.ToTable("statistical_numbers_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.StatisticalNumbersModel.StatisticalNumbersTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("icon_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<string>("numbers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("statistical_numbers_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("icon_id");

                    b.HasIndex("language_id");

                    b.HasIndex("statistical_numbers_id");

                    b.HasIndex("status_translation_id");

                    b.ToTable("statistical_numbers_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.StatusModel.Status", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool?>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("status")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.ToTable("statuses_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            is_deleted = false,
                            name = "Faol",
                            status = "Active"
                        },
                        new
                        {
                            id = 2,
                            is_deleted = false,
                            name = "O'chirilgan",
                            status = "Deleted"
                        });
                });

            modelBuilder.Entity("Entities.Model.StatusModel.StatusTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool?>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("status")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_id");

                    b.ToTable("statuses_translations_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            is_deleted = false,
                            language_id = 1,
                            name = "Active",
                            status = "Active",
                            status_id = 1
                        },
                        new
                        {
                            id = 2,
                            is_deleted = false,
                            language_id = 1,
                            name = "Deleted",
                            status = "Deleted",
                            status_id = 2
                        },
                        new
                        {
                            id = 3,
                            is_deleted = false,
                            language_id = 2,
                            name = "Активный",
                            status = "Active",
                            status_id = 1
                        },
                        new
                        {
                            id = 4,
                            is_deleted = false,
                            language_id = 2,
                            name = "Удалено",
                            status = "Deleted",
                            status_id = 2
                        });
                });

            modelBuilder.Entity("Entities.Model.TerritoriesModel.Territorie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("country_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("country_id");

                    b.HasIndex("status_id");

                    b.ToTable("territories_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 8,
                            country_id = 1,
                            status_id = 1,
                            title = "Qoraqalpogʻiston Respublikasi"
                        },
                        new
                        {
                            id = 9,
                            country_id = 1,
                            status_id = 1,
                            title = "Buxoro viloyati"
                        },
                        new
                        {
                            id = 10,
                            country_id = 1,
                            status_id = 1,
                            title = "Samarqand viloyati"
                        },
                        new
                        {
                            id = 11,
                            country_id = 1,
                            status_id = 1,
                            title = "Navoiy viloyati"
                        },
                        new
                        {
                            id = 12,
                            country_id = 1,
                            status_id = 1,
                            title = "Andijon viloyati"
                        },
                        new
                        {
                            id = 13,
                            country_id = 1,
                            status_id = 1,
                            title = "Fargʻona viloyati"
                        },
                        new
                        {
                            id = 14,
                            country_id = 1,
                            status_id = 1,
                            title = "Surxondaryo viloyati"
                        },
                        new
                        {
                            id = 15,
                            country_id = 1,
                            status_id = 1,
                            title = "Sirdaryo viloyati"
                        },
                        new
                        {
                            id = 16,
                            country_id = 1,
                            status_id = 1,
                            title = "Xorazm viloyati"
                        },
                        new
                        {
                            id = 17,
                            country_id = 1,
                            status_id = 1,
                            title = "Toshkent viloyati"
                        },
                        new
                        {
                            id = 18,
                            country_id = 1,
                            status_id = 1,
                            title = "Qashqadaryo viloyati"
                        },
                        new
                        {
                            id = 19,
                            country_id = 1,
                            status_id = 1,
                            title = "Jizzax viloyati"
                        },
                        new
                        {
                            id = 21,
                            country_id = 1,
                            status_id = 1,
                            title = "Namangan viloyati"
                        },
                        new
                        {
                            id = 22,
                            country_id = 1,
                            status_id = 1,
                            title = "Toshkent shahri"
                        });
                });

            modelBuilder.Entity("Entities.Model.TerritoriesModel.TerritorieTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("country_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<int?>("territorie_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("country_translation_id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.HasIndex("territorie_id");

                    b.ToTable("territories_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.TokensModel.Tokens", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("tokens_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool?>("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("person_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("removed")
                        .HasColumnType("boolean");

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("user_type_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("login")
                        .IsUnique();

                    b.HasIndex("person_id");

                    b.HasIndex("status_id");

                    b.HasIndex("user_type_id");

                    b.ToTable("users_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            login = "admin",
                            password = "X85cpohQrV+USeuUGKBe8qQ4PKBd1oT1MYOu8wOr2V4=",
                            status_id = 1,
                            user_type_id = 1
                        });
                });

            modelBuilder.Entity("Entities.Model.UserType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.ToTable("user_types_20ts24tu");

                    b.HasData(
                        new
                        {
                            id = 1,
                            status_id = 1,
                            type = "Admin"
                        });
                });

            modelBuilder.Entity("Entities.Model.UserTypeTranslation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("language_id")
                        .HasColumnType("integer");

                    b.Property<int?>("status_translation_id")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("user_types_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("language_id");

                    b.HasIndex("status_translation_id");

                    b.HasIndex("user_types_id");

                    b.ToTable("user_types_translations_20ts24tu");
                });

            modelBuilder.Entity("Entities.Model.AppealToEmployeeModel.AppealToEmployee", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("status_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.AppealToEmployeeModel.AppealToEmployeeTranslation", b =>
                {
                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("language_");

                    b.Navigation("status_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.AppealsToTheRectorsModel.AppealToRector", b =>
                {
                    b.HasOne("Entities.Model.CountrysModel.Country", "country_")
                        .WithMany()
                        .HasForeignKey("country_id");

                    b.HasOne("Entities.Model.DistrictsModel.District", "district_")
                        .WithMany()
                        .HasForeignKey("district_id");

                    b.HasOne("Entities.Model.EmploymentModel.Employment", "employe_")
                        .WithMany()
                        .HasForeignKey("employe_id");

                    b.HasOne("Entities.Model.FileModel.Files", "file_")
                        .WithMany()
                        .HasForeignKey("file_id");

                    b.HasOne("Entities.Model.GenderModel.Gender", "gender_")
                        .WithMany()
                        .HasForeignKey("gender_id");

                    b.HasOne("Entities.Model.NeighborhoodsModel.Neighborhood", "neighborhood_")
                        .WithMany()
                        .HasForeignKey("neighborhood_id");

                    b.HasOne("Entities.Model.TerritoriesModel.Territorie", "territorie_")
                        .WithMany()
                        .HasForeignKey("territorie_id");

                    b.Navigation("country_");

                    b.Navigation("district_");

                    b.Navigation("employe_");

                    b.Navigation("file_");

                    b.Navigation("gender_");

                    b.Navigation("neighborhood_");

                    b.Navigation("territorie_");
                });

            modelBuilder.Entity("Entities.Model.AppealsToTheRectorsModel.AppealToRectorTranslation", b =>
                {
                    b.HasOne("Entities.Model.CountrysModel.CountryTranslation", "country_translation_")
                        .WithMany()
                        .HasForeignKey("country_translation_id");

                    b.HasOne("Entities.Model.DistrictsModel.DistrictTranslation", "district_translation_")
                        .WithMany()
                        .HasForeignKey("district_translation_id");

                    b.HasOne("Entities.Model.EmploymentModel.EmploymentTranslation", "employe_translation_")
                        .WithMany()
                        .HasForeignKey("employe_translation_id");

                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "file_translation_")
                        .WithMany()
                        .HasForeignKey("file_translation_id");

                    b.HasOne("Entities.Model.GenderModel.GenderTranslation", "gender_translation_")
                        .WithMany()
                        .HasForeignKey("gender_translation_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.NeighborhoodsModel.NeighborhoodTranslation", "neighborhood_translation_")
                        .WithMany()
                        .HasForeignKey("neighborhood_translation_id");

                    b.HasOne("Entities.Model.TerritoriesModel.TerritorieTranslation", "territorie_translation_")
                        .WithMany()
                        .HasForeignKey("territorie_translation_id");

                    b.Navigation("country_translation_");

                    b.Navigation("district_translation_");

                    b.Navigation("employe_translation_");

                    b.Navigation("file_translation_");

                    b.Navigation("gender_translation_");

                    b.Navigation("language_");

                    b.Navigation("neighborhood_translation_");

                    b.Navigation("territorie_translation_");
                });

            modelBuilder.Entity("Entities.Model.BlogsCategoryModel.BlogCategory", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.BlogsCategoryModel.BlogCategoryTranslation", b =>
                {
                    b.HasOne("Entities.Model.BlogsCategoryModel.BlogCategory", "blog_category_")
                        .WithMany()
                        .HasForeignKey("blog_category_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("blog_category_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.BlogsModel.Blog", b =>
                {
                    b.HasOne("Entities.Model.BlogsCategoryModel.BlogCategory", "blog_category_")
                        .WithMany()
                        .HasForeignKey("blog_category_id");

                    b.HasOne("Entities.Model.FileModel.Files", "img_")
                        .WithMany()
                        .HasForeignKey("img_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("blog_category_");

                    b.Navigation("img_");

                    b.Navigation("status_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.BlogsModel.BlogTranslation", b =>
                {
                    b.HasOne("Entities.Model.BlogsCategoryModel.BlogCategoryTranslation", "blog_category_translation_")
                        .WithMany()
                        .HasForeignKey("blog_category_translation_id");

                    b.HasOne("Entities.Model.BlogsModel.Blog", "blog_")
                        .WithMany()
                        .HasForeignKey("blog_id");

                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "img_translation_")
                        .WithMany()
                        .HasForeignKey("img_translation_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("blog_");

                    b.Navigation("blog_category_translation_");

                    b.Navigation("img_translation_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.CountrysModel.Country", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.CountrysModel.CountryTranslation", b =>
                {
                    b.HasOne("Entities.Model.CountrysModel.Country", "country_")
                        .WithMany()
                        .HasForeignKey("country_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("country_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.DepartamentDetailsModel.DepartamentDetail", b =>
                {
                    b.HasOne("Entities.Model.DepartamentsModel.Departament", "departament_")
                        .WithMany()
                        .HasForeignKey("departament_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("departament_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.DepartamentDetailsModel.DepartamentDetailTranslation", b =>
                {
                    b.HasOne("Entities.Model.DepartamentDetailsModel.DepartamentDetail", "departament_detail_")
                        .WithMany()
                        .HasForeignKey("departament_detail_id");

                    b.HasOne("Entities.Model.DepartamentsModel.DepartamentTranslation", "departament_translation_")
                        .WithMany()
                        .HasForeignKey("departament_translation_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("departament_detail_");

                    b.Navigation("departament_translation_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.DepartamentsModel.Departament", b =>
                {
                    b.HasOne("Entities.Model.DepartamentsTypeModel.DepartamentType", "departament_type_")
                        .WithMany()
                        .HasForeignKey("departament_type_id");

                    b.HasOne("Entities.Model.FileModel.Files", "img_icon_")
                        .WithMany()
                        .HasForeignKey("img_icon_id");

                    b.HasOne("Entities.Model.FileModel.Files", "img_")
                        .WithMany()
                        .HasForeignKey("img_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("departament_type_");

                    b.Navigation("img_");

                    b.Navigation("img_icon_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.DepartamentsModel.DepartamentTranslation", b =>
                {
                    b.HasOne("Entities.Model.DepartamentsModel.Departament", "departament_")
                        .WithMany()
                        .HasForeignKey("departament_id");

                    b.HasOne("Entities.Model.DepartamentsTypeModel.DepartamentTypeTranslation", "departament_type_translation_")
                        .WithMany()
                        .HasForeignKey("departament_type_translation_id");

                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "img_icon_")
                        .WithMany()
                        .HasForeignKey("img_icon_id");

                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "img_")
                        .WithMany()
                        .HasForeignKey("img_id")
                        .HasConstraintName("FK_departament_translations_20ts24tu_files_translations_20ts2~1");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("departament_");

                    b.Navigation("departament_type_translation_");

                    b.Navigation("img_");

                    b.Navigation("img_icon_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.DepartamentsTypeModel.DepartamentType", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.DepartamentsTypeModel.DepartamentTypeTranslation", b =>
                {
                    b.HasOne("Entities.Model.DepartamentsTypeModel.DepartamentType", "departament_type_")
                        .WithMany()
                        .HasForeignKey("departament_type_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("departament_type_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.DistrictsModel.District", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.TerritoriesModel.Territorie", "territorie_")
                        .WithMany()
                        .HasForeignKey("territorie_id");

                    b.Navigation("status_");

                    b.Navigation("territorie_");
                });

            modelBuilder.Entity("Entities.Model.DistrictsModel.DistrictTranslation", b =>
                {
                    b.HasOne("Entities.Model.DistrictsModel.District", "district_")
                        .WithMany()
                        .HasForeignKey("district_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.HasOne("Entities.Model.TerritoriesModel.TerritorieTranslation", "territorie_translation_")
                        .WithMany()
                        .HasForeignKey("territorie_translation_id");

                    b.Navigation("district_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");

                    b.Navigation("territorie_translation_");
                });

            modelBuilder.Entity("Entities.Model.DocumentTeacher110Model.DocumentTeacher110", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.DocumentTeacher110Model.DocumentTeacher110Set", b =>
                {
                    b.HasOne("Entities.Model.DocumentTeacher110Model.DocumentTeacher110", "document_")
                        .WithMany()
                        .HasForeignKey("document_id");

                    b.HasOne("Entities.Model.FileModel.Files", "file_")
                        .WithMany()
                        .HasForeignKey("file_id");

                    b.HasOne("Entities.Model.PersonModel.Person", "person_")
                        .WithMany()
                        .HasForeignKey("person_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("document_");

                    b.Navigation("file_");

                    b.Navigation("person_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.EmployeeTypesModel.EmployeeType", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.EmployeeTypesModel.EmployeeTypeTranslation", b =>
                {
                    b.HasOne("Entities.Model.EmployeeTypesModel.EmployeeType", "employee_")
                        .WithMany()
                        .HasForeignKey("employee_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("employee_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.EmploymentModel.Employment", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.EmploymentModel.EmploymentTranslation", b =>
                {
                    b.HasOne("Entities.Model.EmploymentModel.Employment", "employment_")
                        .WithMany()
                        .HasForeignKey("employment_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("employment_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.FileModel.Files", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("status_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.FileModel.FilesTranslation", b =>
                {
                    b.HasOne("Entities.Model.FileModel.Files", "files_")
                        .WithMany()
                        .HasForeignKey("files_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("files_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.GenderModel.Gender", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.GenderModel.GenderTranslation", b =>
                {
                    b.HasOne("Entities.Model.GenderModel.Gender", "gender_")
                        .WithMany()
                        .HasForeignKey("gender_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("gender_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.InteractiveServicesModel.InteractiveServices", b =>
                {
                    b.HasOne("Entities.Model.FileModel.Files", "icon_")
                        .WithMany()
                        .HasForeignKey("icon_id");

                    b.HasOne("Entities.Model.FileModel.Files", "img_")
                        .WithMany()
                        .HasForeignKey("img_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("icon_");

                    b.Navigation("img_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.InteractiveServicesModel.InteractiveServicesTranslation", b =>
                {
                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "icon_")
                        .WithMany()
                        .HasForeignKey("icon_id");

                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "img_")
                        .WithMany()
                        .HasForeignKey("img_id")
                        .HasConstraintName("FK_interactive_services_translations_20ts24tu_files_translati~1");

                    b.HasOne("Entities.Model.InteractiveServicesModel.InteractiveServices", "interactive_services_")
                        .WithMany()
                        .HasForeignKey("interactive_services_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("icon_");

                    b.Navigation("img_");

                    b.Navigation("interactive_services_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.LanguagesModel.Language", b =>
                {
                    b.HasOne("Entities.Model.FileModel.Files", "img_")
                        .WithMany()
                        .HasForeignKey("img_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("img_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.MenuModel.Menu", b =>
                {
                    b.HasOne("Entities.Model.BlogsModel.Blog", "blog_")
                        .WithMany()
                        .HasForeignKey("blog_id");

                    b.HasOne("Entities.Model.DepartamentsModel.Departament", "departament_")
                        .WithMany()
                        .HasForeignKey("departament_id");

                    b.HasOne("Entities.Model.FileModel.Files", "icon_")
                        .WithMany()
                        .HasForeignKey("icon_id");

                    b.HasOne("Entities.Model.MenuTypesModel.MenuType", "menu_type_")
                        .WithMany()
                        .HasForeignKey("menu_type_id");

                    b.HasOne("Entities.Model.PagesModel.Pages", "page_")
                        .WithMany()
                        .HasForeignKey("page_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("blog_");

                    b.Navigation("departament_");

                    b.Navigation("icon_");

                    b.Navigation("menu_type_");

                    b.Navigation("page_");

                    b.Navigation("status_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.MenuModel.MenuTranslation", b =>
                {
                    b.HasOne("Entities.Model.BlogsModel.BlogTranslation", "blog_translation_")
                        .WithMany()
                        .HasForeignKey("blog_translation_id");

                    b.HasOne("Entities.Model.DepartamentsModel.DepartamentTranslation", "departament_translation_")
                        .WithMany()
                        .HasForeignKey("departament_translation_id");

                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "icon_")
                        .WithMany()
                        .HasForeignKey("icon_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.MenuModel.Menu", "menu_")
                        .WithMany()
                        .HasForeignKey("menu_id");

                    b.HasOne("Entities.Model.MenuTypesModel.MenuTypeTranslation", "menu_type_translation_")
                        .WithMany()
                        .HasForeignKey("menu_type_translation_id");

                    b.HasOne("Entities.Model.PagesModel.PageTranslation", "page_translation_")
                        .WithMany()
                        .HasForeignKey("page_translation_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("blog_translation_");

                    b.Navigation("departament_translation_");

                    b.Navigation("icon_");

                    b.Navigation("language_");

                    b.Navigation("menu_");

                    b.Navigation("menu_type_translation_");

                    b.Navigation("page_translation_");

                    b.Navigation("status_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.MenuTypesModel.MenuType", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.MenuTypesModel.MenuTypeTranslation", b =>
                {
                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.MenuTypesModel.MenuType", "menu_type_")
                        .WithMany()
                        .HasForeignKey("menu_type_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("language_");

                    b.Navigation("menu_type_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.NeighborhoodsModel.Neighborhood", b =>
                {
                    b.HasOne("Entities.Model.DistrictsModel.District", "district_")
                        .WithMany()
                        .HasForeignKey("district_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("district_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.NeighborhoodsModel.NeighborhoodTranslation", b =>
                {
                    b.HasOne("Entities.Model.DistrictsModel.DistrictTranslation", "district_translation_")
                        .WithMany()
                        .HasForeignKey("district_translation_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.NeighborhoodsModel.Neighborhood", "neighborhood_")
                        .WithMany()
                        .HasForeignKey("neighborhood_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("district_translation_");

                    b.Navigation("language_");

                    b.Navigation("neighborhood_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.PagesModel.PageTranslation", b =>
                {
                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "img_translation_")
                        .WithMany()
                        .HasForeignKey("img_translation_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.PagesModel.Pages", "page_")
                        .WithMany()
                        .HasForeignKey("page_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("img_translation_");

                    b.Navigation("language_");

                    b.Navigation("page_");

                    b.Navigation("status_translation_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.PagesModel.Pages", b =>
                {
                    b.HasOne("Entities.Model.FileModel.Files", "img_")
                        .WithMany()
                        .HasForeignKey("img_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("img_");

                    b.Navigation("status_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.PersonDataModel.PersonData", b =>
                {
                    b.HasOne("Entities.Model.PersonModel.Person", "persons_")
                        .WithMany()
                        .HasForeignKey("persons_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("persons_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.PersonDataModel.PersonDataTranslation", b =>
                {
                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.PersonDataModel.PersonData", "persons_data_")
                        .WithMany()
                        .HasForeignKey("persons_data_id");

                    b.HasOne("Entities.Model.PersonModel.PersonTranslation", "persons_translation_")
                        .WithMany()
                        .HasForeignKey("persons_translation_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("language_");

                    b.Navigation("persons_data_");

                    b.Navigation("persons_translation_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.PersonModel.Person", b =>
                {
                    b.HasOne("Entities.Model.DepartamentsModel.Departament", "departament_")
                        .WithMany()
                        .HasForeignKey("departament_id");

                    b.HasOne("Entities.Model.EmployeeTypesModel.EmployeeType", "employee_type_")
                        .WithMany()
                        .HasForeignKey("employee_type_id");

                    b.HasOne("Entities.Model.GenderModel.Gender", "gender_")
                        .WithMany()
                        .HasForeignKey("gender_id");

                    b.HasOne("Entities.Model.FileModel.Files", "img_")
                        .WithMany()
                        .HasForeignKey("img_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("departament_");

                    b.Navigation("employee_type_");

                    b.Navigation("gender_");

                    b.Navigation("img_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.PersonModel.PersonTranslation", b =>
                {
                    b.HasOne("Entities.Model.DepartamentsModel.DepartamentTranslation", "departament_translation_")
                        .WithMany()
                        .HasForeignKey("departament_translation_id");

                    b.HasOne("Entities.Model.EmployeeTypesModel.EmployeeTypeTranslation", "employee_type_translation_")
                        .WithMany()
                        .HasForeignKey("employee_type_translation_id");

                    b.HasOne("Entities.Model.GenderModel.GenderTranslation", "gender_")
                        .WithMany()
                        .HasForeignKey("gender_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.PersonModel.Person", "persons_")
                        .WithMany()
                        .HasForeignKey("persons_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("departament_translation_");

                    b.Navigation("employee_type_translation_");

                    b.Navigation("gender_");

                    b.Navigation("language_");

                    b.Navigation("persons_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.SiteDetailsModel.SiteDetail", b =>
                {
                    b.HasOne("Entities.Model.FileModel.Files", "favicon_")
                        .WithMany()
                        .HasForeignKey("favicon_id");

                    b.HasOne("Entities.Model.FileModel.Files", "logo_b_")
                        .WithMany()
                        .HasForeignKey("logo_b_id");

                    b.HasOne("Entities.Model.FileModel.Files", "logo_w_")
                        .WithMany()
                        .HasForeignKey("logo_w_id");

                    b.HasOne("Entities.Model.SitesModel.Site", "site_")
                        .WithMany()
                        .HasForeignKey("site_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("favicon_");

                    b.Navigation("logo_b_");

                    b.Navigation("logo_w_");

                    b.Navigation("site_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.SiteDetailsModel.SiteDetailTranslation", b =>
                {
                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "favicon_")
                        .WithMany()
                        .HasForeignKey("favicon_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "logo_b_")
                        .WithMany()
                        .HasForeignKey("logo_b_id")
                        .HasConstraintName("FK_site_details_translations_20ts24tu_files_translations_20ts~1");

                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "logo_w_")
                        .WithMany()
                        .HasForeignKey("logo_w_id")
                        .HasConstraintName("FK_site_details_translations_20ts24tu_files_translations_20ts~2");

                    b.HasOne("Entities.Model.SiteDetailsModel.SiteDetail", "site_detail_")
                        .WithMany()
                        .HasForeignKey("site_detail_id");

                    b.HasOne("Entities.Model.SitesModel.SiteTranslation", "site_translation_")
                        .WithMany()
                        .HasForeignKey("site_translation_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("favicon_");

                    b.Navigation("language_");

                    b.Navigation("logo_b_");

                    b.Navigation("logo_w_");

                    b.Navigation("site_detail_");

                    b.Navigation("site_translation_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.SiteTypesModel.SiteType", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.SiteTypesModel.SiteTypeTranslation", b =>
                {
                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.SiteTypesModel.SiteType", "site_type_")
                        .WithMany()
                        .HasForeignKey("site_type_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("language_");

                    b.Navigation("site_type_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.SitesModel.Site", b =>
                {
                    b.HasOne("Entities.Model.SiteTypesModel.SiteType", "site_type_")
                        .WithMany()
                        .HasForeignKey("site_type_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("site_type_");

                    b.Navigation("status_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.SitesModel.SiteTranslation", b =>
                {
                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.SitesModel.Site", "site_")
                        .WithMany()
                        .HasForeignKey("site_id");

                    b.HasOne("Entities.Model.SiteTypesModel.SiteTypeTranslation", "site_type_translation_")
                        .WithMany()
                        .HasForeignKey("site_type_translation_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.HasOne("Entities.Model.User", "user_")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("language_");

                    b.Navigation("site_");

                    b.Navigation("site_type_translation_");

                    b.Navigation("status_translation_");

                    b.Navigation("user_");
                });

            modelBuilder.Entity("Entities.Model.StatisticalNumbersModel.StatisticalNumbers", b =>
                {
                    b.HasOne("Entities.Model.FileModel.Files", "icon_")
                        .WithMany()
                        .HasForeignKey("icon_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("icon_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.StatisticalNumbersModel.StatisticalNumbersTranslation", b =>
                {
                    b.HasOne("Entities.Model.FileModel.FilesTranslation", "icon_")
                        .WithMany()
                        .HasForeignKey("icon_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatisticalNumbersModel.StatisticalNumbers", "statistical_numbers_")
                        .WithMany()
                        .HasForeignKey("statistical_numbers_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.Navigation("icon_");

                    b.Navigation("language_");

                    b.Navigation("statistical_numbers_");

                    b.Navigation("status_translation_");
                });

            modelBuilder.Entity("Entities.Model.StatusModel.StatusTranslation", b =>
                {
                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("language_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.TerritoriesModel.Territorie", b =>
                {
                    b.HasOne("Entities.Model.CountrysModel.Country", "country_")
                        .WithMany()
                        .HasForeignKey("country_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("country_");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.TerritoriesModel.TerritorieTranslation", b =>
                {
                    b.HasOne("Entities.Model.CountrysModel.CountryTranslation", "country_translation_")
                        .WithMany()
                        .HasForeignKey("country_translation_id");

                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.HasOne("Entities.Model.TerritoriesModel.Territorie", "territorie_")
                        .WithMany()
                        .HasForeignKey("territorie_id");

                    b.Navigation("country_translation_");

                    b.Navigation("language_");

                    b.Navigation("status_translation_");

                    b.Navigation("territorie_");
                });

            modelBuilder.Entity("Entities.Model.TokensModel.Tokens", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.User", b =>
                {
                    b.HasOne("Entities.Model.PersonModel.Person", "person_")
                        .WithMany()
                        .HasForeignKey("person_id");

                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.HasOne("Entities.Model.UserType", "user_type_")
                        .WithMany()
                        .HasForeignKey("user_type_id");

                    b.Navigation("person_");

                    b.Navigation("status_");

                    b.Navigation("user_type_");
                });

            modelBuilder.Entity("Entities.Model.UserType", b =>
                {
                    b.HasOne("Entities.Model.StatusModel.Status", "status_")
                        .WithMany()
                        .HasForeignKey("status_id");

                    b.Navigation("status_");
                });

            modelBuilder.Entity("Entities.Model.UserTypeTranslation", b =>
                {
                    b.HasOne("Entities.Model.LanguagesModel.Language", "language_")
                        .WithMany()
                        .HasForeignKey("language_id");

                    b.HasOne("Entities.Model.StatusModel.StatusTranslation", "status_translation_")
                        .WithMany()
                        .HasForeignKey("status_translation_id");

                    b.HasOne("Entities.Model.UserType", "user_types_")
                        .WithMany()
                        .HasForeignKey("user_types_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("language_");

                    b.Navigation("status_translation_");

                    b.Navigation("user_types_");
                });
#pragma warning restore 612, 618
        }
    }
}
